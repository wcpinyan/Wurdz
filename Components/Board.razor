@using Plk.Blazor.DragDrop
@inject AppState appState

<div class="justify-content-center h1 align-self-center ">Wurdz</div>
<ul class="wrapper ">
   

    @foreach (Cell c in myListCells)
    {
        @if (c.row == 7 && c.col == 7)
        {
            <CellComp Item=c 
            image='.images/star.png' 
            HasTile="board.CurrentRow==c.row && board.CurrentCol ==c.col" ></CellComp>
            
        }
        else
        {
            <CellComp Item=c
                OnDrop="(async ()=> await UpdateBoardModel(c.row,c.col))"></CellComp>
            }
    }

</ul>
<style>
    .wrapper {
        display: grid;
        max-width: 785px;
        max-height: 785px;
        background-color: antiquewhite;
        padding: 15px;
        grid-template-rows: repeat(15,50px);
        grid-template-columns: repeat(15,50px);
        border: solid 3px #333;
    }

    .cell {
        list-style-type: none;
        border: solid black 1px;
        text-align: center;
        vertical-align: central;
        width:50px;
        height:50px;
    }
</style>

@code {
    static int numCells = 15;
    string title = "My Wurdz Game";
    string color;
    TileModel droppedTile;
    List<Cell> myListCells = new List<Cell>();
    string urlString = "";
    string dropClass = "";

    [Parameter] public GameBoardModel board {get;set;}=new GameBoardModel(numCells);
    [Parameter] public EventCallback OnUpdate{get;set;}
    public async Task UpdateBoardModel(int row,int col){
        board.CurrentRow=row;
        board.CurrentRow=col;
        await OnUpdate.InvokeAsync(null);
       
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        makeCells();
        appState.boardCells=myListCells;
    }

    void makeCells()
    {
        foreach (Cell c in @board.cells)
        {
            if (c.row == 7 && c.col == 7)
            {

                c.caption = "";
                this.StateHasChanged();
            }

            myListCells.Add(c);
            urlString = "";
        }
    }
   


}
