@using Plk.Blazor.DragDrop
@*@inject AppState appState*@

<div class="justify-content-center h1 align-self-center ">Wurdz</div>
<div class=" grid ">
    @if (myListCells != null)
    {

        @foreach (Cell c in myListCells)
        {
            @if (c.row == 7 && c.col == 7)
            {
                Console.WriteLine("inside STAR");
                <CellComp Item=c                          
                         OnDrop="(async ()=> await UpdateBoardModel(c))"
                          image='images/star.png'
                          HasTile="board.CurrentRow==c.row && board.CurrentCol ==c.col"
                         ></CellComp>

            }
            else
            {
                <CellComp Item=c
                          image="@image"
                          OnDrop="(async ()=> await UpdateBoardModel(c))"></CellComp>
            }


            @*@if (HasTile)
            {

                <img style="border:.1em solid @currentTile.borderColor" src="@currentTile.url" width="48" height="48" alt="Alternate Text" />
            }
            else
            {
                <div style="background-color:@Item.color;align-content:center;--aspect-ratio: 1/1;">
                    @if (image != "")
                    {<img src=@image>}
                    @Item.caption
                </div>
            }*@


        }
    }

</div>
 <style>
     .grid {
         margin:auto;
         display: grid;
         /* grid-template-columns: 1fr 1fr 1fr;*/
         grid-template-rows: repeat(15,50px);
         grid-template-columns: repeat(15,50px);
         height: 80%;
         width: 80%;
     }

         .grid > * {
             background: orange;
             width: 100%;
             border: solid black 1px;
         }

         .grid > [style^='--aspect-ratio']::before {
             content: "";
             display: inline-block;
             width: 1px;
             /*height: 0;*/
             padding-bottom: calc(100% / (var(--aspect-ratio)));
         }
 </style>

@code {
    [CascadingParameter] public CascadingAppState appState { get; set; }
    static int numCells = 15;
    string title = "My Wurdz Game";
    string color;
    TileModel droppedTile;
    List<Cell> myListCells = new List<Cell>();
    string urlString = "";
    string dropClass = "";

    public Cell Item { get; set; }
    public TileModel currentTile { get; set; }
    public bool HasTile { get; set; } = false;
    public PlayerModel activePlayer{get;set;}
    public string image { get; set; } = "";
    [Parameter] public GameBoardModel board { get; set; } = new GameBoardModel(numCells);
    [Parameter] public EventCallback OnUpdate { get; set; }




    public async Task UpdateBoardModel(Cell c){
        board.CurrentRow=c.row;
        board.CurrentRow=c.col;
        await OnUpdate.InvokeAsync(null);

    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        makeCells();
        appState.boardCells=myListCells;
    }

    void makeCells()
    {
        foreach (Cell c in @board.cells)
        {
            if (c.row == 7 && c.col == 7)
            {

                c.caption = "";
                c.image = "images/star.png";

            }

            myListCells.Add(c);
            urlString = "";
        }
    }


    private async Task HandleDrop(Cell c)
    {
        dropClass="";
        HasTile=true;
        appState.selectedTile.cellDroppedOn=Item;
        currentTile = appState.selectedTile;
        @* Console.WriteLine("assigned to: "+currentTile.assignedTo); *@

        //TODO: put other players here
    }

    private void HandleDragEnter()
    {
        dropClass="can-drop";
        //Console.WriteLine("Data transfer item" + e.GetType());
        //Console.WriteLine("Data transfer item" + e.DataTransfer.Items[0]);
        Console.WriteLine("hadle drag enter");
    }
    private void HandleDragLeave()
    {
        dropClass = "";
        Console.WriteLine("something left here.");
    }

    //============= the following came from https://chrissainty.com/investigating-drag-and-drop-with-blazor/

    /// <summary>
    /// Supplies information about an drag event that is being raised.
    /// </summary>
    public class DragEventArgs : MouseEventArgs
    {
        /// <summary>
        /// The data that underlies a drag-and-drop operation, known as the drag data store.
        /// See <see cref="DataTransfer"/>.
        /// </summary>
        public DataTransfer DataTransfer { get; set; }
    }
    public class DataTransfer
    {
        /// <summary>
        /// Gets the type of drag-and-drop operation currently selected or sets the operation to a new type.
        /// The value must be none, copy, link or move.
        /// </summary>
        public string DropEffect { get; set; }

        
        /// <summary>
        /// Gives a <see cref="DataTransferItem"/> array which is a list of all of the drag data.
        /// </summary>
        public TileModel[] Items { get; set; }

        /// <summary>
        /// An array of <see cref="string"/> giving the formats that were set in the dragstart event.
        /// </summary>
        public string[] Types { get; set; }
    }



}
